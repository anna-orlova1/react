{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","NavLink","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageBody","isAuth","dialogsItems","values","sendMessage","Redirect","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,uGCWnKC,EARI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACH,cAACC,EAAA,EAAD,CAASC,GAAIP,EAAb,SAAoBD,EAAMS,UCDnBC,EAJC,SAACV,GACb,OAAO,qBAAKG,UAAWC,IAAEC,OAAlB,SAA2BL,EAAMW,W,0CCCtCC,EAAcC,YAAiB,IAiBtBC,cAAU,CAACC,KAAM,2BAAjBD,EAfQ,SAACd,GACpB,OACI,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CACAC,UAAWC,IACXC,SAAY,CAACC,IAAUV,GACvBH,KAAK,iBACLc,YAAY,yBAEhB,8BAAK,kDCmBFC,EA7BC,SAACxB,GAEb,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAiBP,GAAI4B,EAAE5B,IAAZ4B,EAAE5B,OAC1E6B,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,SAAcsB,EAAE/B,OAC9DuB,EAAMS,eAM3B,OAAKlC,EAAMmC,OAIP,sBAAKhC,UAAWC,IAAEwB,QAAlB,UACI,qBAAKzB,UAAWC,IAAEgC,aAAlB,SACKT,IAEL,qBAAKxB,UAAWC,IAAE4B,SAAlB,SACI,8BAAMD,MAGV,cAAC,EAAD,CAAgBf,SAhBJ,SAACqB,GACjBrC,EAAMsC,YAAYD,EAAOH,sBAGH,cAACK,EAAA,EAAD,CAAU/B,GAAI,Y,+CCfxCgC,EAA6B,SAACf,GAAD,MAAY,CACzCU,OAAQV,EAAMgB,KAAKN,S,OCkBRO,sBACXC,aAhBkB,SAAClB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACkB,GACtB,MAAO,CACHN,YAAa,SAACJ,GACVU,EAASC,YAAmBX,UDTR,SAACY,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAKC,KAAKhD,MAAMmC,OAET,cAACW,EAAD,eAAeE,KAAKhD,QAFI,cAACuC,EAAA,EAAD,CAAU/B,GAAG,eAHT,GACXyC,IAAMH,WAWtC,OAFqCH,YAAQH,EAARG,CAAqCI,KCK/DL,CAGblB","file":"static/js/4.f3ab8b1d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\nimport {Field, reduxForm} from \"redux-form\";\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\nimport {required, maxLengthCreator} from \"../../../utils/validators/validators\";\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field \n                component={Textarea}\n                validate = {[required, maxLength50]}\n                name=\"newMessageBody\" \n                placeholder=\"Enter your message\" />\n            </div>\n            <div><button>Send</button></div>\n        </form>\n    )\n}\n\nexport default reduxForm({form: 'dialog-add-message-form'}) (AddMessageForm);\n\n\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />);\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"} />;\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import { Redirect } from \"react-router-dom\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render(){\n            if (!this.props.isAuth) return <Redirect to='/login'/>\n\n            return <Component {...this.props}/>\n        }\n\n    }\n    \n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent);    \n\n    return ConnectedAuthRedirectComponent;\n}","import React from 'react';\r\nimport { sendMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage \r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}