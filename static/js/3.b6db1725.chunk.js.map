{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","Preloader","Post","item","message","likesCount","MyPosts","React","memo","console","log","postsElements","posts","map","p","postsBlock","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","placeholder","component","Textarea","rows","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,iBAAmB,wC,oBCArCD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,6ICuCVC,EAtCgB,SAACC,GAE5B,MAA8BC,oBAAS,GAAvC,mBAAKC,EAAL,KAAeC,EAAf,KACA,EAA0BF,mBAASD,EAAMI,QAAzC,mBAAKA,EAAL,KAAaC,EAAb,KAEAC,qBAAU,WACVD,EAAUL,EAAMI,UACb,CAACJ,EAAMI,SAeV,OACI,iCACMF,GACE,8BACI,uBAAMK,cAjBG,WACrBJ,GAAY,IAgBA,cAAyCH,EAAMI,QAAU,iBAGhEF,GACG,8BACI,uBAAOM,WAAW,EAAMC,OAlBb,WACvBN,GAAY,GACZH,EAAMU,aAAaN,IAgB6CO,SAb7C,SAACC,GACpBP,EAAUO,EAAEC,cAAcC,QAYgEA,MAAOV,UCZ1FW,EAhBK,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,QAASZ,EAA0B,EAA1BA,OAAQM,EAAkB,EAAlBA,aAEnC,OAAKM,EAKD,8BACI,sBAAKC,UAAWC,IAAEC,iBAAlB,UACI,qBAAKC,IAAKJ,EAAQK,OAAOC,QACzB,cAAC,EAAD,CAAwBlB,OAAQA,EAAQM,aAAcA,SAPvD,cAACa,EAAA,EAAD,K,4CCWAC,EAhBF,SAACxB,GACZ,OACE,sBAAKiB,UAAWC,IAAEO,KAAO,+EAAzB,UACE,qBAAKL,IAAI,kCACT,gCACE,8BACGpB,EAAM0B,UAET,gCACE,wCADF,IACqB1B,EAAM2B,qB,iCCL7BC,EAAUC,IAAMC,MAAK,SAAA9B,GACvB+B,QAAQC,IAAI,WACZ,IAAIC,EACAjC,EAAMkC,MAAMC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAMV,QAASU,EAAEV,QAASC,WAAYS,EAAET,gBAQjE,OACI,sBAAKV,UAAWC,IAAEmB,WAAlB,UACI,oBAAIpB,UAAU,iBAAd,sBACA,cAACqB,EAAD,CAAqBC,SAPb,SAACC,GACbxC,EAAMyC,QAAQD,EAAOE,gBAOjB,qBAAKzB,UAAWC,IAAEgB,MAAlB,SACKD,UAMXU,EAAYC,YAAiB,IAuB/BN,EAAsBO,YAAU,CAACC,KAAK,yBAAhBD,EArBH,SAAC7C,GACpB,OACI,uBAAMuC,SAAUvC,EAAM+C,aAAc9B,UAAU,OAA9C,UACI,8BACI,cAAC+B,EAAA,EAAD,CACAC,KAAK,cACLC,YAAa,gBACbC,UAAWC,IACXnC,UAAU,0CACVoC,KAAK,IACLC,SAAU,CAACC,IAAUZ,OAIzB,8BACI,wBAAQ1B,UAAU,MAAlB,8BAQDW,I,QC9BA4B,EAHUC,aAhBH,SAACC,GACnB,MAAO,CACHxB,MAAOwB,EAAMC,YAAYzB,MACzBQ,YAAagB,EAAMC,YAAYjB,gBAId,SAACkB,GACtB,MAAO,CACHnB,QAAS,SAACC,GACNkB,EAASC,YAAqBnB,QAMjBe,CAA6C7B,GCRvDkC,EATC,SAAC9D,GACb,OACI,gCACI,cAAC,EAAD,CAAagB,QAAShB,EAAMgB,QAASZ,OAAQJ,EAAMI,OAAQM,aAAcV,EAAMU,eAC/E,cAAC,EAAD,Q,gBCDNqD,E,uKAEF,WACI,IAAIC,EAASC,KAAKjE,MAAMkE,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAKjE,MAAMoE,mBAEhBH,KAAKjE,MAAMqE,QAAQC,KAAK,UAGhCL,KAAKjE,MAAMuE,eAAeP,GAC1BC,KAAKjE,MAAMwE,UAAUR,K,oBAGzB,WACI,OACI,8BACI,cAAC,EAAD,2BAAaC,KAAKjE,OAAlB,IAAyBgB,QAASiD,KAAKjE,MAAMgB,QAASZ,OAAQ6D,KAAKjE,MAAMI,OAAQM,aAAcuD,KAAKjE,MAAMU,sB,GAjB3FmB,IAAM4C,WA8BtBC,sBACXjB,aARkB,SAACC,GAAD,MAAY,CAC9B1C,QAAS0C,EAAMC,YAAY3C,QAC3BZ,OAAQsD,EAAMC,YAAYvD,OAC1BgE,iBAAkBV,EAAMiB,KAAKX,OAC7BY,OAAQlB,EAAMiB,KAAKC,UAIM,CAAEL,mBAAgBC,cAAW9D,mBACtDmE,IAFWH,CAGbX","file":"static/js/3.b6db1725.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React, { useState, useEffect } from 'react';\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n    setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activateEditMode}> {props.status || \"No status\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input autoFocus={true} onBlur={deactivateEditMode} onChange={onStatusChange} value={status} />\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large} /> \r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item + ' p-6 max-w-sm mb-2 bg-white rounded-xl shadow-md flex items-center space-x-4'}>\r\n      <img src='https://place-hold.it/100x100' />\r\n      <div>\r\n        <div>\r\n          {props.message}\r\n        </div>\r\n        <div>\r\n          <span>like</span> {props.likesCount}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst MyPosts = React.memo(props => {\r\n    console.log(\"Yo baby\");\r\n    let postsElements =\r\n        props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} />);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText );\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3 className=\"pb-2 font-bold\">My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nconst maxLength10=maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className=\"pb-4\">\r\n            <div>\r\n                <Field \r\n                name=\"newPostText\" \r\n                placeholder={\"Post messages\"}\r\n                component={Textarea} \r\n                className=\"rounded-xl w-1/3 p-2 focus:outline-none\" \r\n                rows=\"5\"\r\n                validate={[required, maxLength10]}\r\n                /> \r\n            </div>\r\n\r\n            <div>\r\n                <button className=\"btn\" >Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form:\"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { addPostActionCreator } from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        } \r\n\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport { connect } from 'react-redux';\nimport { getUserProfile, getStatus, updateStatus } from '../../redux/profile-reducer';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\n\nclass ProfileContainer extends React.Component {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if(!userId){\n                this.props.history.push(\"/login\");\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    render() {\n        return (\n            <div>\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} />\n            </div>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n});\n\nexport default compose(\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\n    withRouter,\n)(ProfileContainer);\n\n"],"sourceRoot":""}